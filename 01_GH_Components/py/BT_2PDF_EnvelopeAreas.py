## IDF2PHPP: A Plugin for exporting an EnergyPlus IDF file to the Passive House Planning Package (PHPP). Created by blgdtyp, llc# # This component is part of IDF2PHPP.# # Copyright (c) 2020, bldgtyp, llc <info@bldgtyp.com> # IDF2PHPP is free software; you can redistribute it and/or modify # it under the terms of the GNU General Public License as published # by the Free Software Foundation; either version 3 of the License, # or (at your option) any later version. # # IDF2PHPP is distributed in the hope that it will be useful,# but WITHOUT ANY WARRANTY; without even the implied warranty of # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the # GNU General Public License for more details.# # For a copy of the GNU General Public License# see <http://www.gnu.org/licenses/>.# # @license GPL-3.0+ <http://spdx.org/licenses/GPL-3.0+>#"""Takes in a list of Honeybee zones and outputs print-ready (floor plan) objects for the Treated Floor Area (TFA). Will pull out any 'PHPP Room' information from the zones and create surfaces, color them by TFA factor, and create room-tags based on the data. Be sure you've used the 'Create PHPP Rooms' to assign parameters to the zones and geometry correctly before trying to use this.-        Args:        _HBZones: A list of the Honeybee zone objects which are being analyzed in the model.        surfaceColor_: (Color) To color the Surface mesh / hatch for printing        outlineColor_: (Color) To color the Surface outline for printing        outlineWeight_: (float) Default 0.5 - print weight for the surface outlines    Returns:        filenames_: A list of autogenerated Filenames for use if you want.        geom_: A Tree of the geometry including the surfaces as colored meshes, and the surface outlines. Each unique assembly / construciton is one branch of the tree.        geomAttributes_: Rhino.DocObjects.ObjectAttributes for all the geometry        pageLabels_: Some text info that can be printed on the Layout page if you want."""ghenv.Component.Name = "BT_2PDF_EnvelopeAreas"ghenv.Component.NickName = "2PDF | Envelope"ghenv.Component.Message = 'JUN_07_2020'ghenv.Component.IconDisplayMode = ghenv.Component.IconDisplayMode.applicationghenv.Component.Category = "BT"ghenv.Component.SubCategory = "03 | PDF"import scriptcontext as scfrom collections import defaultdictimport ghpythonlib.components as ghcfrom System import Objectfrom Grasshopper import DataTreefrom Grasshopper.Kernel.Data import GH_Pathimport Rhinoimport rhinoscriptsyntax as rshb_hive = sc.sticky["honeybee_Hive"]()HBZoneObjects = hb_hive.callFromHoneybeeHive(_HBZones)def getGeometryFromHive(_HBZoneObjs, _srfcColor):    """Used to sort the HB Hive zone Geometry by Construction Type         Arguments:        _HBZoneObjs: The Honeybee Zones from the Hive        _color: The color for the returned Mesh    Returns:        geomByConstruction: Dictionary of all the Envelope Geometry (as colored Mesh) by Construction Name        Ommits all interior surface types ('Interior Wall', etc..)    """    geomByConstruction = defaultdict()    areasByConstruction = defaultdict()    wireframe = []    srfcColor = _srfcColor if _srfcColor != None else ghc.ColourRGB(255,255,168,230)        for zone in _HBZoneObjs:        for surface in zone.surfaces:            # Clean up Surface Name            srfcName = surface.EPConstruction            srfcName = srfcName.replace('PHPP_CONST_', '')            srfcName = srfcName.replace('__Int__', '')            srfcName = srfcName.replace('_', ' ')                        # Geom to Mesh            geom = ghc.MeshColours(surface.geometry, srfcColor)            srfcArea =  ghc.Area(geom).area                        # Get the outer Edges for Boundary            boundaryEdges = ghc.MeshEdges(geom).naked_edges            boundary = ghc.JoinCurves(boundaryEdges, preserve=False)                        # Remove the EP Interior Elements            if srfcName == 'Interior Floor':                continue            if srfcName == 'Interior Wall':                continue            if srfcName == 'Interior Ceiling':                continue                        # Add Geom to dict            if srfcName in geomByConstruction.keys():                geomByConstruction[srfcName].append(geom)                geomByConstruction[srfcName].append(boundary)            else:                geomByConstruction[srfcName] = [geom, boundary]                        # Add Area to dict            if srfcName in areasByConstruction.keys():                areasByConstruction[srfcName] += srfcArea            else:                areasByConstruction[srfcName] = srfcArea        return geomByConstruction, areasByConstructiongeom_ = DataTree[Object]()pageLabels_ = DataTree[Object]()geomAttributes_ = DataTree[Object]()filenames_ = []# Setup the attributes to passsurfaceAttributes = Rhino.DocObjects.ObjectAttributes()surfaceAttributes.ObjectColor = surfaceColor_ if surfaceColor_ != None else ghc.ColourRGB(255,255,168,230)surfaceAttributes.PlotWeight = float(outlineWeight_) if outlineWeight_ != None else 0.5surfaceAttributes.ColorSource = Rhino.DocObjects.ObjectColorSource.ColorFromObjectsurfaceAttributes.PlotColorSource = Rhino.DocObjects.ObjectPlotColorSource.PlotColorFromObjectsurfaceAttributes.PlotWeightSource = Rhino.DocObjects.ObjectPlotWeightSource.PlotWeightFromObjectsurfaceAttributes.DisplayOrder = -1 # 1 = Front, -1 = BackcurveAttributes = Rhino.DocObjects.ObjectAttributes()curveAttributes.ObjectColor = outlineColor_ if outlineColor_ != None else ghc.ColourRGB(255,255,0,183)curveAttributes.PlotWeight = float(outlineWeight_) if outlineWeight_ != None else 0.5curveAttributes.ColorSource = Rhino.DocObjects.ObjectColorSource.ColorFromObjectcurveAttributes.PlotColorSource = Rhino.DocObjects.ObjectPlotColorSource.PlotColorFromObjectcurveAttributes.PlotWeightSource = Rhino.DocObjects.ObjectPlotWeightSource.PlotWeightFromObjectcurveAttributes.DisplayOrder = 1 # 1 = Front, -1 = Backif len(HBZoneObjects) > 0:    geomDict, areasDict = getGeometryFromHive(HBZoneObjects, surfaceColor_)        path = 0    for k, v in geomDict.items():        # Attributes        for item in v:            if rs.IsMesh(item):                geomAttributes_.Add(surfaceAttributes, GH_Path(path))            else:                geomAttributes_.Add(curveAttributes, GH_Path(path))                # Rest of the outputs        geom_.AddRange(v, GH_Path(path))        pageLabels_.AddRange([k, '{:.1f} m2'.format(areasDict.get(k, 0.0))], GH_Path(path))        filenames_.append('Surfaces-{}'.format(k))        path += 1